// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int      @id @default(autoincrement()) // Primary key with auto-increment
  email     String   @unique // Email must be unique
  password  String
  name      String
  library   Library? @relation // Optional relation to Library
  books     Book[]   @relation("UserBooks") // One-to-many relation with Book model
  notes Note[] @relation("UserNotes")
}

model Note {
  id          Int        @id @default(autoincrement()) // Primary key with auto-increment
  title       String
  description String?    // Optional field for description
  createdById Int        // Foreign key to User model
  createdBy   User       @relation("UserNotes", fields: [createdById], references: [id]) // Relation to User model
}

model Book {
  id          Int        @id @default(autoincrement()) // Primary key with auto-increment
  title       String
  author      String
  description String?    // Optional field for description
  pages       Int?       // Optional field for number of pages
  image       String     @default("") // Default empty string for image
  createdById Int        // Foreign key to User model
  createdBy   User       @relation("UserBooks", fields: [createdById], references: [id]) // Relation to User model
  createdAt   DateTime   @default(now()) // Timestamp for when the book is created
  
  // Many-to-many relation to Library through the join table
  libraries   Library[]  @relation("LibraryBooks") // A book can belong to many libraries
}

model Library {
  id          Int        @id @default(autoincrement()) // Primary key with auto-increment
  name        String     @unique // Library name should be unique
  createdById Int        @unique // Add @unique to enforce the one-to-one relationship
  createdBy   User       @relation(fields: [createdById], references: [id]) // One-to-one relation to User
  createdAt   DateTime   @default(now()) // Timestamp for when the library is created

  // Many-to-many relation to Book through the join table
  books       Book[]     @relation("LibraryBooks") // A library can contain many books
}







